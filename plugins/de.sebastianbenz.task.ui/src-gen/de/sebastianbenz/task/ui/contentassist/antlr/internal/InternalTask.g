/*
* generated by Xtext
*/
grammar InternalTask;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.sebastianbenz.task.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.sebastianbenz.task.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.sebastianbenz.task.services.TaskGrammarAccess;

}

@parser::members {
 
 	private TaskGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TaskGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleTaskModel
entryRuleTaskModel 
:
{ before(grammarAccess.getTaskModelRule()); }
	 ruleTaskModel
{ after(grammarAccess.getTaskModelRule()); } 
	 EOF 
;

// Rule TaskModel
ruleTaskModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTaskModelAccess().getGroup()); }
(rule__TaskModel__Group__0)
{ after(grammarAccess.getTaskModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContent
entryRuleContent 
:
{ before(grammarAccess.getContentRule()); }
	 ruleContent
{ after(grammarAccess.getContentRule()); } 
	 EOF 
;

// Rule Content
ruleContent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContentAccess().getAlternatives()); }
(rule__Content__Alternatives)
{ after(grammarAccess.getContentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTask
entryRuleTask 
:
{ before(grammarAccess.getTaskRule()); }
	 ruleTask
{ after(grammarAccess.getTaskRule()); } 
	 EOF 
;

// Rule Task
ruleTask
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTaskAccess().getGroup()); }
(rule__Task__Group__0)
{ after(grammarAccess.getTaskAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNote
entryRuleNote 
:
{ before(grammarAccess.getNoteRule()); }
	 ruleNote
{ after(grammarAccess.getNoteRule()); } 
	 EOF 
;

// Rule Note
ruleNote
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNoteAccess().getGroup()); }
(rule__Note__Group__0)
{ after(grammarAccess.getNoteAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProject
entryRuleProject 
:
{ before(grammarAccess.getProjectRule()); }
	 ruleProject
{ after(grammarAccess.getProjectRule()); } 
	 EOF 
;

// Rule Project
ruleProject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProjectAccess().getGroup()); }
(rule__Project__Group__0)
{ after(grammarAccess.getProjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCode
entryRuleCode 
:
{ before(grammarAccess.getCodeRule()); }
	 ruleCode
{ after(grammarAccess.getCodeRule()); } 
	 EOF 
;

// Rule Code
ruleCode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCodeAccess().getGroup()); }
(rule__Code__Group__0)
{ after(grammarAccess.getCodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntendation
entryRuleIntendation 
:
{ before(grammarAccess.getIntendationRule()); }
	 ruleIntendation
{ after(grammarAccess.getIntendationRule()); } 
	 EOF 
;

// Rule Intendation
ruleIntendation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntendationAccess().getGroup()); }
(rule__Intendation__Group__0)
{ after(grammarAccess.getIntendationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEmptyLine
entryRuleEmptyLine 
:
{ before(grammarAccess.getEmptyLineRule()); }
	 ruleEmptyLine
{ after(grammarAccess.getEmptyLineRule()); } 
	 EOF 
;

// Rule EmptyLine
ruleEmptyLine
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEmptyLineAccess().getTextAssignment()); }
(rule__EmptyLine__TextAssignment)
{ after(grammarAccess.getEmptyLineAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpaces
entryRuleSpaces 
:
{ before(grammarAccess.getSpacesRule()); }
	 ruleSpaces
{ after(grammarAccess.getSpacesRule()); } 
	 EOF 
;

// Rule Spaces
ruleSpaces
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSpacesAccess().getGroup()); }
(rule__Spaces__Group__0)
{ after(grammarAccess.getSpacesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWs
entryRuleWs 
:
{ before(grammarAccess.getWsRule()); }
	 ruleWs
{ after(grammarAccess.getWsRule()); } 
	 EOF 
;

// Rule Ws
ruleWs
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWsAccess().getAlternatives()); }
(rule__Ws__Alternatives)
{ after(grammarAccess.getWsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Content__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getProjectParserRuleCall_0()); }
	ruleProject
{ after(grammarAccess.getContentAccess().getProjectParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getContentAccess().getTaskParserRuleCall_1()); }
	ruleTask
{ after(grammarAccess.getContentAccess().getTaskParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getContentAccess().getNoteParserRuleCall_2()); }
	ruleNote
{ after(grammarAccess.getContentAccess().getNoteParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getContentAccess().getEmptyLineParserRuleCall_3()); }
	ruleEmptyLine
{ after(grammarAccess.getContentAccess().getEmptyLineParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getContentAccess().getCodeParserRuleCall_4()); }
	ruleCode
{ after(grammarAccess.getContentAccess().getCodeParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Intendation__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntendationAccess().getGroup_0_0()); }
(rule__Intendation__Group_0_0__0)
{ after(grammarAccess.getIntendationAccess().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getIntendationAccess().getTABTerminalRuleCall_0_1()); }
	RULE_TAB
{ after(grammarAccess.getIntendationAccess().getTABTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ws__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWsAccess().getSPACETerminalRuleCall_0()); }
	RULE_SPACE
{ after(grammarAccess.getWsAccess().getSPACETerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getWsAccess().getTABTerminalRuleCall_1()); }
	RULE_TAB
{ after(grammarAccess.getWsAccess().getTABTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TaskModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TaskModel__Group__0__Impl
	rule__TaskModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TaskModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskModelAccess().getTaskModelAction_0()); }
(

)
{ after(grammarAccess.getTaskModelAccess().getTaskModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TaskModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TaskModel__Group__1__Impl
	rule__TaskModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TaskModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskModelAccess().getContentsAssignment_1()); }
(rule__TaskModel__ContentsAssignment_1)*
{ after(grammarAccess.getTaskModelAccess().getContentsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TaskModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TaskModel__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TaskModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskModelAccess().getWsParserRuleCall_2()); }
(	ruleWs)*
{ after(grammarAccess.getTaskModelAccess().getWsParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Task__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Task__Group__0__Impl
	rule__Task__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskAccess().getIntendAssignment_0()); }
(rule__Task__IntendAssignment_0)
{ after(grammarAccess.getTaskAccess().getIntendAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Task__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskAccess().getTextAssignment_1()); }
(rule__Task__TextAssignment_1)
{ after(grammarAccess.getTaskAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Note__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Note__Group__0__Impl
	rule__Note__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getIntendAssignment_0()); }
(rule__Note__IntendAssignment_0)
{ after(grammarAccess.getNoteAccess().getIntendAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Note__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Note__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getTextAssignment_1()); }
(rule__Note__TextAssignment_1)
{ after(grammarAccess.getNoteAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Project__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Project__Group__0__Impl
	rule__Project__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getIntendAssignment_0()); }
(rule__Project__IntendAssignment_0)
{ after(grammarAccess.getProjectAccess().getIntendAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Project__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Project__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getTextAssignment_1()); }
(rule__Project__TextAssignment_1)
{ after(grammarAccess.getProjectAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Code__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Code__Group__0__Impl
	rule__Code__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getIntendAssignment_0()); }
(rule__Code__IntendAssignment_0)
{ after(grammarAccess.getCodeAccess().getIntendAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Code__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Code__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getTextAssignment_1()); }
(rule__Code__TextAssignment_1)
{ after(grammarAccess.getCodeAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Intendation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Intendation__Group__0__Impl
	rule__Intendation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Intendation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntendationAccess().getAlternatives_0()); }
(rule__Intendation__Alternatives_0)*
{ after(grammarAccess.getIntendationAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Intendation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Intendation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Intendation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntendationAccess().getSPACETerminalRuleCall_1()); }
(	RULE_SPACE)?
{ after(grammarAccess.getIntendationAccess().getSPACETerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Intendation__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Intendation__Group_0_0__0__Impl
	rule__Intendation__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Intendation__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntendationAccess().getSPACETerminalRuleCall_0_0_0()); }
	RULE_SPACE
{ after(grammarAccess.getIntendationAccess().getSPACETerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Intendation__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Intendation__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Intendation__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntendationAccess().getSPACETerminalRuleCall_0_0_1()); }
	RULE_SPACE
{ after(grammarAccess.getIntendationAccess().getSPACETerminalRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Spaces__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spaces__Group__0__Impl
	rule__Spaces__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spaces__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpacesAccess().getWsParserRuleCall_0()); }
(	ruleWs)*
{ after(grammarAccess.getSpacesAccess().getWsParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spaces__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spaces__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spaces__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpacesAccess().getNLTerminalRuleCall_1()); }
	RULE_NL
{ after(grammarAccess.getSpacesAccess().getNLTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__TaskModel__ContentsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskModelAccess().getContentsContentParserRuleCall_1_0()); }
	ruleContent{ after(grammarAccess.getTaskModelAccess().getContentsContentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Task__IntendAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskAccess().getIntendIntendationParserRuleCall_0_0()); }
	ruleIntendation{ after(grammarAccess.getTaskAccess().getIntendIntendationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Task__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskAccess().getTextTASK_TEXTTerminalRuleCall_1_0()); }
	RULE_TASK_TEXT{ after(grammarAccess.getTaskAccess().getTextTASK_TEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Note__IntendAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getIntendIntendationParserRuleCall_0_0()); }
	ruleIntendation{ after(grammarAccess.getNoteAccess().getIntendIntendationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Note__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getTextTEXTTerminalRuleCall_1_0()); }
	RULE_TEXT{ after(grammarAccess.getNoteAccess().getTextTEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Project__IntendAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getIntendIntendationParserRuleCall_0_0()); }
	ruleIntendation{ after(grammarAccess.getProjectAccess().getIntendIntendationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Project__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getTextPROJECT_TerminalRuleCall_1_0()); }
	RULE_PROJECT_{ after(grammarAccess.getProjectAccess().getTextPROJECT_TerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Code__IntendAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getIntendIntendationParserRuleCall_0_0()); }
	ruleIntendation{ after(grammarAccess.getCodeAccess().getIntendIntendationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Code__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getTextCODE_TerminalRuleCall_1_0()); }
	RULE_CODE_{ after(grammarAccess.getCodeAccess().getTextCODE_TerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyLine__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyLineAccess().getTextSpacesParserRuleCall_0()); }
	ruleSpaces{ after(grammarAccess.getEmptyLineAccess().getTextSpacesParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_SPACE : ' ';

RULE_TAB : '\t';

RULE_NL : '\r'? '\n';

RULE_CODE_ : '\'\'\'' ( options {greedy=false;} : . )*'\'\'\'' RULE_NL?;

RULE_TASK_TEXT : RULE_HYPHEN ~(('\n'|'\r'))* RULE_NL?;

RULE_TEXT : (~((RULE_HYPHEN|RULE_COLON|'\n'|'\r'|RULE_SPACE|RULE_TAB))|~((RULE_HYPHEN|'\n'|'\r'|RULE_SPACE|RULE_TAB)) ~(('\n'|'\r'))* ~((RULE_COLON|'\n'|'\r'))) RULE_NL?;

RULE_PROJECT_ : ~(('\n'|'\r'|RULE_HYPHEN|RULE_SPACE|RULE_TAB)) ~(('\n'|'\r'))* RULE_COLON RULE_NL?;

fragment RULE_COLON : ':';

fragment RULE_HYPHEN : '-';


