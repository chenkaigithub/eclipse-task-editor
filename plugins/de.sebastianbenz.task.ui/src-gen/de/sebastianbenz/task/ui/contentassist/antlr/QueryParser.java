/*
* generated by Xtext
*/
package de.sebastianbenz.task.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.sebastianbenz.task.services.QueryGrammarAccess;

public class QueryParser extends AbstractContentAssistParser {
	
	@Inject
	private QueryGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.sebastianbenz.task.ui.contentassist.antlr.internal.InternalQueryParser createParser() {
		de.sebastianbenz.task.ui.contentassist.antlr.internal.InternalQueryParser result = new de.sebastianbenz.task.ui.contentassist.antlr.internal.InternalQueryParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getOrExprAccess().getAlternatives_1_1(), "rule__OrExpr__Alternatives_1_1");
					put(grammarAccess.getAndExprAccess().getAlternatives_1_1(), "rule__AndExpr__Alternatives_1_1");
					put(grammarAccess.getUnaryExprAccess().getAlternatives(), "rule__UnaryExpr__Alternatives");
					put(grammarAccess.getUnaryExprAccess().getAlternatives_1_1(), "rule__UnaryExpr__Alternatives_1_1");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getProjectReferenceAccess().getAlternatives_2(), "rule__ProjectReference__Alternatives_2");
					put(grammarAccess.getTaskReferenceAccess().getAlternatives_2(), "rule__TaskReference__Alternatives_2");
					put(grammarAccess.getTextReferenceAccess().getAlternatives_2(), "rule__TextReference__Alternatives_2");
					put(grammarAccess.getCompEqOperatorAccess().getAlternatives(), "rule__CompEqOperator__Alternatives");
					put(grammarAccess.getCompOperatorAccess().getAlternatives(), "rule__CompOperator__Alternatives");
					put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
					put(grammarAccess.getOrExprAccess().getGroup(), "rule__OrExpr__Group__0");
					put(grammarAccess.getOrExprAccess().getGroup_1(), "rule__OrExpr__Group_1__0");
					put(grammarAccess.getAndExprAccess().getGroup(), "rule__AndExpr__Group__0");
					put(grammarAccess.getAndExprAccess().getGroup_1(), "rule__AndExpr__Group_1__0");
					put(grammarAccess.getCompEqExprAccess().getGroup(), "rule__CompEqExpr__Group__0");
					put(grammarAccess.getCompEqExprAccess().getGroup_1(), "rule__CompEqExpr__Group_1__0");
					put(grammarAccess.getCompExprAccess().getGroup(), "rule__CompExpr__Group__0");
					put(grammarAccess.getCompExprAccess().getGroup_1(), "rule__CompExpr__Group_1__0");
					put(grammarAccess.getUnaryExprAccess().getGroup_1(), "rule__UnaryExpr__Group_1__0");
					put(grammarAccess.getParenExprAccess().getGroup(), "rule__ParenExpr__Group__0");
					put(grammarAccess.getProjectReferenceAccess().getGroup(), "rule__ProjectReference__Group__0");
					put(grammarAccess.getTaskReferenceAccess().getGroup(), "rule__TaskReference__Group__0");
					put(grammarAccess.getTextReferenceAccess().getGroup(), "rule__TextReference__Group__0");
					put(grammarAccess.getWordsAccess().getGroup(), "rule__Words__Group__0");
					put(grammarAccess.getTagReferenceAccess().getGroup(), "rule__TagReference__Group__0");
					put(grammarAccess.getQueryAccess().getExpressionAssignment_1(), "rule__Query__ExpressionAssignment_1");
					put(grammarAccess.getOrExprAccess().getRightAssignment_1_2(), "rule__OrExpr__RightAssignment_1_2");
					put(grammarAccess.getAndExprAccess().getRightAssignment_1_2(), "rule__AndExpr__RightAssignment_1_2");
					put(grammarAccess.getCompEqExprAccess().getOperatorAssignment_1_1(), "rule__CompEqExpr__OperatorAssignment_1_1");
					put(grammarAccess.getCompEqExprAccess().getRightAssignment_1_2(), "rule__CompEqExpr__RightAssignment_1_2");
					put(grammarAccess.getCompExprAccess().getOperatorAssignment_1_1(), "rule__CompExpr__OperatorAssignment_1_1");
					put(grammarAccess.getCompExprAccess().getRightAssignment_1_2(), "rule__CompExpr__RightAssignment_1_2");
					put(grammarAccess.getUnaryExprAccess().getExprAssignment_1_2(), "rule__UnaryExpr__ExprAssignment_1_2");
					put(grammarAccess.getParenExprAccess().getExprAssignment_2(), "rule__ParenExpr__ExprAssignment_2");
					put(grammarAccess.getProjectReferenceAccess().getValueAssignment_2_0(), "rule__ProjectReference__ValueAssignment_2_0");
					put(grammarAccess.getProjectReferenceAccess().getValueAssignment_2_1(), "rule__ProjectReference__ValueAssignment_2_1");
					put(grammarAccess.getTaskReferenceAccess().getValueAssignment_2_0(), "rule__TaskReference__ValueAssignment_2_0");
					put(grammarAccess.getTaskReferenceAccess().getValueAssignment_2_1(), "rule__TaskReference__ValueAssignment_2_1");
					put(grammarAccess.getTextReferenceAccess().getValueAssignment_2_0(), "rule__TextReference__ValueAssignment_2_0");
					put(grammarAccess.getTextReferenceAccess().getValueAssignment_2_1(), "rule__TextReference__ValueAssignment_2_1");
					put(grammarAccess.getWordsAccess().getValuesAssignment_0(), "rule__Words__ValuesAssignment_0");
					put(grammarAccess.getWordsAccess().getValuesAssignment_1(), "rule__Words__ValuesAssignment_1");
					put(grammarAccess.getWordAccess().getValueAssignment(), "rule__Word__ValueAssignment");
					put(grammarAccess.getPhraseAccess().getValueAssignment(), "rule__Phrase__ValueAssignment");
					put(grammarAccess.getTagReferenceAccess().getValueAssignment_1(), "rule__TagReference__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.sebastianbenz.task.ui.contentassist.antlr.internal.InternalQueryParser typedParser = (de.sebastianbenz.task.ui.contentassist.antlr.internal.InternalQueryParser) parser;
			typedParser.entryRuleQuery();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}
	
	public QueryGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(QueryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
