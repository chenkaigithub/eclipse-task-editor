/*
* generated by Xtext
*/
package de.sebastianbenz.task.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.sebastianbenz.task.services.TaskGrammarAccess;

public class TaskParser extends AbstractContentAssistParser {
	
	@Inject
	private TaskGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.sebastianbenz.task.ui.contentassist.antlr.internal.InternalTaskParser createParser() {
		de.sebastianbenz.task.ui.contentassist.antlr.internal.InternalTaskParser result = new de.sebastianbenz.task.ui.contentassist.antlr.internal.InternalTaskParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getContentAccess().getAlternatives(), "rule__Content__Alternatives");
					put(grammarAccess.getTaskModelAccess().getGroup(), "rule__TaskModel__Group__0");
					put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
					put(grammarAccess.getNoteAccess().getGroup(), "rule__Note__Group__0");
					put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
					put(grammarAccess.getCodeAccess().getGroup(), "rule__Code__Group__0");
					put(grammarAccess.getSpacesAccess().getGroup(), "rule__Spaces__Group__0");
					put(grammarAccess.getTaskModelAccess().getContentsAssignment_1(), "rule__TaskModel__ContentsAssignment_1");
					put(grammarAccess.getTaskAccess().getIntendAssignment_0(), "rule__Task__IntendAssignment_0");
					put(grammarAccess.getTaskAccess().getTextAssignment_1(), "rule__Task__TextAssignment_1");
					put(grammarAccess.getNoteAccess().getIntendAssignment_0(), "rule__Note__IntendAssignment_0");
					put(grammarAccess.getNoteAccess().getTextAssignment_1(), "rule__Note__TextAssignment_1");
					put(grammarAccess.getProjectAccess().getIntendAssignment_0(), "rule__Project__IntendAssignment_0");
					put(grammarAccess.getProjectAccess().getTextAssignment_1(), "rule__Project__TextAssignment_1");
					put(grammarAccess.getCodeAccess().getIntendAssignment_0(), "rule__Code__IntendAssignment_0");
					put(grammarAccess.getCodeAccess().getTextAssignment_1(), "rule__Code__TextAssignment_1");
					put(grammarAccess.getEmptyLineAccess().getTextAssignment(), "rule__EmptyLine__TextAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.sebastianbenz.task.ui.contentassist.antlr.internal.InternalTaskParser typedParser = (de.sebastianbenz.task.ui.contentassist.antlr.internal.InternalTaskParser) parser;
			typedParser.entryRuleTaskModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public TaskGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TaskGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
